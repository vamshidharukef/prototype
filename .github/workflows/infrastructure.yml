# Infrastructure Deployment Workflow
# 
# This GitHub Actions workflow automates the deployment of Azure infrastructure
# for the prototype project. It performs the following main tasks:
#
# 1. Sets up the environment and variables
# 2. Logs in to Azure
# 3. Creates or updates the resource group
# 4. Replaces placeholders in the parameters.json file with actual values from GitHub secrets
# 5. Deploys Azure resources using the Bicep template
#
# The workflow is triggered on pushes to the main branch and uses environment
# variables and secrets for configuration. It's designed to work with the
# main.bicep and parameters.json files in the infrastructure directory.
#
# Note: Ensure all required secrets and variables are set in the GitHub repository
# settings before running this workflow.

name: Infrastructure 🔨
run-name: Proto-type base infrastructure build from ${{ github.repository }}

on:
  push:
    branches:
      - infrastructure
env:
  PRODUCT: prototype
  ENVIRONMENT: infrastructure
  TIMEZONE: '${{ vars.TIMEZONE }}'
  # Deployment environment target i.e., `development`, `staging`, `production`
  TARGET: ${{ vars.ENVIRONMENT }}

jobs:
# 1. Setup infrastructure variables
  setup:
    name: Setup 🔧
    runs-on: [ubuntu-latest]
    outputs:
      environment: ${{ env.ENVIRONMENT }}
      timezone: ${{ env.TIMEZONE }}
    steps:
      - name: Repository 🗃️
        uses: actions/checkout@v4

      - name: Environment 🧪
        run: echo "Environment set to ${{ env.ENVIRONMENT }}"

      - name: Timezone 🌐
        run: echo "Timezone set to ${{ env.TIMEZONE }}"

      - name: Login 🔐
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 

      - name: Azure defaults ✨
        uses: azure/cli@v2
        with:
          inlineScript: |
            # Basic
            az configure --defaults location=${{ vars.REGION }}
            az configure --defaults group=rg-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }}

      - name: Resource group 🏗️
        uses: azure/cli@v2
        with:
          inlineScript: |
            az group create \
            --location ${{ vars.REGION }} \
            --resource-group rg-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }} \
            --name rg-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }}            
            
      - name: Set Resource Group Name
        run: echo "RESOURCE_GROUP_NAME=rg-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }}" >> $GITHUB_ENV

      - name: Replace GitHub variables into parameters.json
        run: | 
          # Replace GitHub variables into parameters.json
          sed -i "s|{{LOG_PLAN}}|${{secrets.LOG_PLAN}}|g" ./infrastructure/parameters.json
          sed -i "s|{{LOCATION}}|${{ secrets.LOCATION }}|g" ./infrastructure/parameters.json
          sed -i "s|{{LOG_QUOTA}}|${{ secrets.LOG_QUOTA }}|g" ./infrastructure/parameters.json
          sed -i "s|{{LOG_RETENTION_DAYS}}|${{ secrets.LOG_RETENTION_DAY }}|g" ./infrastructure/parameters.json
          sed -i "s|{{VNET_ADDRESS_PREFIX}}|${{ secrets.VNET_ADDRESS_PREFIX }}|g" ./infrastructure/parameters.json
          sed -i "s|{{VNET_SUBNET_PRIVATE_PREFIX}}|${{ secrets.VNET_SUBNET_PRIVATE_PREFIX }}|g" ./infrastructure/parameters.json
          sed -i "s|{{VNET_SUBNET_WEBAPP_PREFIX}}|${{ secrets.VNET_SUBNET_WEBAPP_PREFIX }}|g" ./infrastructure/parameters.json
          sed -i "s|{{ALLOWED_IP_RANGES}}|${{ secrets.ALLOWED_IP_RANGES }}|g" ./infrastructure/parameters.json
          
      - name: Deploy Azure Resources
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: ./infrastructure/main.bicep
          parameters: ./infrastructure/parameters.json          
          scope: resourcegroup                                       
  

      
